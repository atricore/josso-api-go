/*
 * Atricore Console :: Remote : API
 *
 * # Atricore Console API
 *
 * API version: 1.4.3-SNAPSHOT
 * Contact: sgonzalez@atricore.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// StoreIdVaultReq struct for StoreIdVaultReq
type StoreIdVaultReq struct {
	IdVault *EmbeddedIdentityVaultDTO `json:"idVault,omitempty"`
	IdaName *string `json:"idaName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoreIdVaultReq StoreIdVaultReq

// NewStoreIdVaultReq instantiates a new StoreIdVaultReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreIdVaultReq() *StoreIdVaultReq {
	this := StoreIdVaultReq{}
	return &this
}

// NewStoreIdVaultReqWithDefaults instantiates a new StoreIdVaultReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreIdVaultReqWithDefaults() *StoreIdVaultReq {
	this := StoreIdVaultReq{}
	return &this
}

// GetIdVault returns the IdVault field value if set, zero value otherwise.
func (o *StoreIdVaultReq) GetIdVault() EmbeddedIdentityVaultDTO {
	if o == nil || o.IdVault == nil {
		var ret EmbeddedIdentityVaultDTO
		return ret
	}
	return *o.IdVault
}

// GetIdVaultOk returns a tuple with the IdVault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreIdVaultReq) GetIdVaultOk() (*EmbeddedIdentityVaultDTO, bool) {
	if o == nil || o.IdVault == nil {
		return nil, false
	}
	return o.IdVault, true
}

// HasIdVault returns a boolean if a field has been set.
func (o *StoreIdVaultReq) HasIdVault() bool {
	if o != nil && o.IdVault != nil {
		return true
	}

	return false
}

// SetIdVault gets a reference to the given EmbeddedIdentityVaultDTO and assigns it to the IdVault field.
func (o *StoreIdVaultReq) SetIdVault(v EmbeddedIdentityVaultDTO) {
	o.IdVault = &v
}

// GetIdaName returns the IdaName field value if set, zero value otherwise.
func (o *StoreIdVaultReq) GetIdaName() string {
	if o == nil || o.IdaName == nil {
		var ret string
		return ret
	}
	return *o.IdaName
}

// GetIdaNameOk returns a tuple with the IdaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreIdVaultReq) GetIdaNameOk() (*string, bool) {
	if o == nil || o.IdaName == nil {
		return nil, false
	}
	return o.IdaName, true
}

// HasIdaName returns a boolean if a field has been set.
func (o *StoreIdVaultReq) HasIdaName() bool {
	if o != nil && o.IdaName != nil {
		return true
	}

	return false
}

// SetIdaName gets a reference to the given string and assigns it to the IdaName field.
func (o *StoreIdVaultReq) SetIdaName(v string) {
	o.IdaName = &v
}

func (o StoreIdVaultReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IdVault != nil {
		toSerialize["idVault"] = o.IdVault
	}
	if o.IdaName != nil {
		toSerialize["idaName"] = o.IdaName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StoreIdVaultReq) UnmarshalJSON(bytes []byte) (err error) {
	varStoreIdVaultReq := _StoreIdVaultReq{}

	if err = json.Unmarshal(bytes, &varStoreIdVaultReq); err == nil {
		*o = StoreIdVaultReq(varStoreIdVaultReq)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "idVault")
		delete(additionalProperties, "idaName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreIdVaultReq struct {
	value *StoreIdVaultReq
	isSet bool
}

func (v NullableStoreIdVaultReq) Get() *StoreIdVaultReq {
	return v.value
}

func (v *NullableStoreIdVaultReq) Set(val *StoreIdVaultReq) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreIdVaultReq) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreIdVaultReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreIdVaultReq(val *StoreIdVaultReq) *NullableStoreIdVaultReq {
	return &NullableStoreIdVaultReq{value: val, isSet: true}
}

func (v NullableStoreIdVaultReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreIdVaultReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


