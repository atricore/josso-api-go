/*
 * Atricore Console :: Remote : API
 *
 * # Atricore Console API
 *
 * API version: 1.4.3-SNAPSHOT
 * Contact: sgonzalez@atricore.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// StoreApplianceReq struct for StoreApplianceReq
type StoreApplianceReq struct {
	Appliance *IdentityApplianceDefinitionDTO `json:"appliance,omitempty"`
	IdaName *string `json:"idaName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoreApplianceReq StoreApplianceReq

// NewStoreApplianceReq instantiates a new StoreApplianceReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreApplianceReq() *StoreApplianceReq {
	this := StoreApplianceReq{}
	return &this
}

// NewStoreApplianceReqWithDefaults instantiates a new StoreApplianceReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreApplianceReqWithDefaults() *StoreApplianceReq {
	this := StoreApplianceReq{}
	return &this
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *StoreApplianceReq) GetAppliance() IdentityApplianceDefinitionDTO {
	if o == nil || o.Appliance == nil {
		var ret IdentityApplianceDefinitionDTO
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreApplianceReq) GetApplianceOk() (*IdentityApplianceDefinitionDTO, bool) {
	if o == nil || o.Appliance == nil {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *StoreApplianceReq) HasAppliance() bool {
	if o != nil && o.Appliance != nil {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given IdentityApplianceDefinitionDTO and assigns it to the Appliance field.
func (o *StoreApplianceReq) SetAppliance(v IdentityApplianceDefinitionDTO) {
	o.Appliance = &v
}

// GetIdaName returns the IdaName field value if set, zero value otherwise.
func (o *StoreApplianceReq) GetIdaName() string {
	if o == nil || o.IdaName == nil {
		var ret string
		return ret
	}
	return *o.IdaName
}

// GetIdaNameOk returns a tuple with the IdaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreApplianceReq) GetIdaNameOk() (*string, bool) {
	if o == nil || o.IdaName == nil {
		return nil, false
	}
	return o.IdaName, true
}

// HasIdaName returns a boolean if a field has been set.
func (o *StoreApplianceReq) HasIdaName() bool {
	if o != nil && o.IdaName != nil {
		return true
	}

	return false
}

// SetIdaName gets a reference to the given string and assigns it to the IdaName field.
func (o *StoreApplianceReq) SetIdaName(v string) {
	o.IdaName = &v
}

func (o StoreApplianceReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Appliance != nil {
		toSerialize["appliance"] = o.Appliance
	}
	if o.IdaName != nil {
		toSerialize["idaName"] = o.IdaName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StoreApplianceReq) UnmarshalJSON(bytes []byte) (err error) {
	varStoreApplianceReq := _StoreApplianceReq{}

	if err = json.Unmarshal(bytes, &varStoreApplianceReq); err == nil {
		*o = StoreApplianceReq(varStoreApplianceReq)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appliance")
		delete(additionalProperties, "idaName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreApplianceReq struct {
	value *StoreApplianceReq
	isSet bool
}

func (v NullableStoreApplianceReq) Get() *StoreApplianceReq {
	return v.value
}

func (v *NullableStoreApplianceReq) Set(val *StoreApplianceReq) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreApplianceReq) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreApplianceReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreApplianceReq(val *StoreApplianceReq) *NullableStoreApplianceReq {
	return &NullableStoreApplianceReq{value: val, isSet: true}
}

func (v NullableStoreApplianceReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreApplianceReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


