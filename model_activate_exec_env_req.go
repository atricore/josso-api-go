/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.4.3-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// ActivateExecEnvReq struct for ActivateExecEnvReq
type ActivateExecEnvReq struct {
	ActivateSamples *bool `json:"activateSamples,omitempty"`
	ApplianceId *string `json:"applianceId,omitempty"`
	Destination *string `json:"destination,omitempty"`
	ExecEnvFolder *string `json:"execEnvFolder,omitempty"`
	ExecEnvName *string `json:"execEnvName,omitempty"`
	IdaName *string `json:"idaName,omitempty"`
	Password *string `json:"password,omitempty"`
	Reactivate *bool `json:"reactivate,omitempty"`
	Replace *bool `json:"replace,omitempty"`
	Username *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ActivateExecEnvReq ActivateExecEnvReq

// NewActivateExecEnvReq instantiates a new ActivateExecEnvReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivateExecEnvReq() *ActivateExecEnvReq {
	this := ActivateExecEnvReq{}
	return &this
}

// NewActivateExecEnvReqWithDefaults instantiates a new ActivateExecEnvReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivateExecEnvReqWithDefaults() *ActivateExecEnvReq {
	this := ActivateExecEnvReq{}
	return &this
}

// GetActivateSamples returns the ActivateSamples field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetActivateSamples() bool {
	if o == nil || o.ActivateSamples == nil {
		var ret bool
		return ret
	}
	return *o.ActivateSamples
}

// GetActivateSamplesOk returns a tuple with the ActivateSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetActivateSamplesOk() (*bool, bool) {
	if o == nil || o.ActivateSamples == nil {
		return nil, false
	}
	return o.ActivateSamples, true
}

// HasActivateSamples returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasActivateSamples() bool {
	if o != nil && o.ActivateSamples != nil {
		return true
	}

	return false
}

// SetActivateSamples gets a reference to the given bool and assigns it to the ActivateSamples field.
func (o *ActivateExecEnvReq) SetActivateSamples(v bool) {
	o.ActivateSamples = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetApplianceId() string {
	if o == nil || o.ApplianceId == nil {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetApplianceIdOk() (*string, bool) {
	if o == nil || o.ApplianceId == nil {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasApplianceId() bool {
	if o != nil && o.ApplianceId != nil {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *ActivateExecEnvReq) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetDestination() string {
	if o == nil || o.Destination == nil {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetDestinationOk() (*string, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *ActivateExecEnvReq) SetDestination(v string) {
	o.Destination = &v
}

// GetExecEnvFolder returns the ExecEnvFolder field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetExecEnvFolder() string {
	if o == nil || o.ExecEnvFolder == nil {
		var ret string
		return ret
	}
	return *o.ExecEnvFolder
}

// GetExecEnvFolderOk returns a tuple with the ExecEnvFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetExecEnvFolderOk() (*string, bool) {
	if o == nil || o.ExecEnvFolder == nil {
		return nil, false
	}
	return o.ExecEnvFolder, true
}

// HasExecEnvFolder returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasExecEnvFolder() bool {
	if o != nil && o.ExecEnvFolder != nil {
		return true
	}

	return false
}

// SetExecEnvFolder gets a reference to the given string and assigns it to the ExecEnvFolder field.
func (o *ActivateExecEnvReq) SetExecEnvFolder(v string) {
	o.ExecEnvFolder = &v
}

// GetExecEnvName returns the ExecEnvName field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetExecEnvName() string {
	if o == nil || o.ExecEnvName == nil {
		var ret string
		return ret
	}
	return *o.ExecEnvName
}

// GetExecEnvNameOk returns a tuple with the ExecEnvName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetExecEnvNameOk() (*string, bool) {
	if o == nil || o.ExecEnvName == nil {
		return nil, false
	}
	return o.ExecEnvName, true
}

// HasExecEnvName returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasExecEnvName() bool {
	if o != nil && o.ExecEnvName != nil {
		return true
	}

	return false
}

// SetExecEnvName gets a reference to the given string and assigns it to the ExecEnvName field.
func (o *ActivateExecEnvReq) SetExecEnvName(v string) {
	o.ExecEnvName = &v
}

// GetIdaName returns the IdaName field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetIdaName() string {
	if o == nil || o.IdaName == nil {
		var ret string
		return ret
	}
	return *o.IdaName
}

// GetIdaNameOk returns a tuple with the IdaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetIdaNameOk() (*string, bool) {
	if o == nil || o.IdaName == nil {
		return nil, false
	}
	return o.IdaName, true
}

// HasIdaName returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasIdaName() bool {
	if o != nil && o.IdaName != nil {
		return true
	}

	return false
}

// SetIdaName gets a reference to the given string and assigns it to the IdaName field.
func (o *ActivateExecEnvReq) SetIdaName(v string) {
	o.IdaName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ActivateExecEnvReq) SetPassword(v string) {
	o.Password = &v
}

// GetReactivate returns the Reactivate field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetReactivate() bool {
	if o == nil || o.Reactivate == nil {
		var ret bool
		return ret
	}
	return *o.Reactivate
}

// GetReactivateOk returns a tuple with the Reactivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetReactivateOk() (*bool, bool) {
	if o == nil || o.Reactivate == nil {
		return nil, false
	}
	return o.Reactivate, true
}

// HasReactivate returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasReactivate() bool {
	if o != nil && o.Reactivate != nil {
		return true
	}

	return false
}

// SetReactivate gets a reference to the given bool and assigns it to the Reactivate field.
func (o *ActivateExecEnvReq) SetReactivate(v bool) {
	o.Reactivate = &v
}

// GetReplace returns the Replace field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetReplace() bool {
	if o == nil || o.Replace == nil {
		var ret bool
		return ret
	}
	return *o.Replace
}

// GetReplaceOk returns a tuple with the Replace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetReplaceOk() (*bool, bool) {
	if o == nil || o.Replace == nil {
		return nil, false
	}
	return o.Replace, true
}

// HasReplace returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasReplace() bool {
	if o != nil && o.Replace != nil {
		return true
	}

	return false
}

// SetReplace gets a reference to the given bool and assigns it to the Replace field.
func (o *ActivateExecEnvReq) SetReplace(v bool) {
	o.Replace = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ActivateExecEnvReq) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivateExecEnvReq) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ActivateExecEnvReq) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ActivateExecEnvReq) SetUsername(v string) {
	o.Username = &v
}

func (o ActivateExecEnvReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivateSamples != nil {
		toSerialize["activateSamples"] = o.ActivateSamples
	}
	if o.ApplianceId != nil {
		toSerialize["applianceId"] = o.ApplianceId
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	if o.ExecEnvFolder != nil {
		toSerialize["execEnvFolder"] = o.ExecEnvFolder
	}
	if o.ExecEnvName != nil {
		toSerialize["execEnvName"] = o.ExecEnvName
	}
	if o.IdaName != nil {
		toSerialize["idaName"] = o.IdaName
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Reactivate != nil {
		toSerialize["reactivate"] = o.Reactivate
	}
	if o.Replace != nil {
		toSerialize["replace"] = o.Replace
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ActivateExecEnvReq) UnmarshalJSON(bytes []byte) (err error) {
	varActivateExecEnvReq := _ActivateExecEnvReq{}

	if err = json.Unmarshal(bytes, &varActivateExecEnvReq); err == nil {
		*o = ActivateExecEnvReq(varActivateExecEnvReq)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "activateSamples")
		delete(additionalProperties, "applianceId")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "execEnvFolder")
		delete(additionalProperties, "execEnvName")
		delete(additionalProperties, "idaName")
		delete(additionalProperties, "password")
		delete(additionalProperties, "reactivate")
		delete(additionalProperties, "replace")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableActivateExecEnvReq struct {
	value *ActivateExecEnvReq
	isSet bool
}

func (v NullableActivateExecEnvReq) Get() *ActivateExecEnvReq {
	return v.value
}

func (v *NullableActivateExecEnvReq) Set(val *ActivateExecEnvReq) {
	v.value = val
	v.isSet = true
}

func (v NullableActivateExecEnvReq) IsSet() bool {
	return v.isSet
}

func (v *NullableActivateExecEnvReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivateExecEnvReq(val *ActivateExecEnvReq) *NullableActivateExecEnvReq {
	return &NullableActivateExecEnvReq{value: val, isSet: true}
}

func (v NullableActivateExecEnvReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivateExecEnvReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


