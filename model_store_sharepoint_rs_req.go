/*
Atricore Console :: Remote : API

# Atricore Console API

API version: 1.5.0-SNAPSHOT
Contact: sgonzalez@atricore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jossoappi

import (
	"encoding/json"
)

// StoreSharepointRsReq struct for StoreSharepointRsReq
type StoreSharepointRsReq struct {
	IdaName *string `json:"idaName,omitempty"`
	Resource *SharepointResourceDTO `json:"resource,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoreSharepointRsReq StoreSharepointRsReq

// NewStoreSharepointRsReq instantiates a new StoreSharepointRsReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreSharepointRsReq() *StoreSharepointRsReq {
	this := StoreSharepointRsReq{}
	return &this
}

// NewStoreSharepointRsReqWithDefaults instantiates a new StoreSharepointRsReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreSharepointRsReqWithDefaults() *StoreSharepointRsReq {
	this := StoreSharepointRsReq{}
	return &this
}

// GetIdaName returns the IdaName field value if set, zero value otherwise.
func (o *StoreSharepointRsReq) GetIdaName() string {
	if o == nil || o.IdaName == nil {
		var ret string
		return ret
	}
	return *o.IdaName
}

// GetIdaNameOk returns a tuple with the IdaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreSharepointRsReq) GetIdaNameOk() (*string, bool) {
	if o == nil || o.IdaName == nil {
		return nil, false
	}
	return o.IdaName, true
}

// HasIdaName returns a boolean if a field has been set.
func (o *StoreSharepointRsReq) HasIdaName() bool {
	if o != nil && o.IdaName != nil {
		return true
	}

	return false
}

// SetIdaName gets a reference to the given string and assigns it to the IdaName field.
func (o *StoreSharepointRsReq) SetIdaName(v string) {
	o.IdaName = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *StoreSharepointRsReq) GetResource() SharepointResourceDTO {
	if o == nil || o.Resource == nil {
		var ret SharepointResourceDTO
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreSharepointRsReq) GetResourceOk() (*SharepointResourceDTO, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *StoreSharepointRsReq) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given SharepointResourceDTO and assigns it to the Resource field.
func (o *StoreSharepointRsReq) SetResource(v SharepointResourceDTO) {
	o.Resource = &v
}

func (o StoreSharepointRsReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IdaName != nil {
		toSerialize["idaName"] = o.IdaName
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StoreSharepointRsReq) UnmarshalJSON(bytes []byte) (err error) {
	varStoreSharepointRsReq := _StoreSharepointRsReq{}

	if err = json.Unmarshal(bytes, &varStoreSharepointRsReq); err == nil {
		*o = StoreSharepointRsReq(varStoreSharepointRsReq)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "idaName")
		delete(additionalProperties, "resource")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoreSharepointRsReq struct {
	value *StoreSharepointRsReq
	isSet bool
}

func (v NullableStoreSharepointRsReq) Get() *StoreSharepointRsReq {
	return v.value
}

func (v *NullableStoreSharepointRsReq) Set(val *StoreSharepointRsReq) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreSharepointRsReq) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreSharepointRsReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreSharepointRsReq(val *StoreSharepointRsReq) *NullableStoreSharepointRsReq {
	return &NullableStoreSharepointRsReq{value: val, isSet: true}
}

func (v NullableStoreSharepointRsReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreSharepointRsReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


